import { ConvexProvider, ConvexReactClient } from "convex/react";
import { ReactNode } from "react";

/**
 * Configura√ß√£o do cliente Convex para integra√ß√£o com React
 * Fornece o contexto necess√°rio para usar as fun√ß√µes do banco
 */

// URL do seu projeto Convex (substitua pela sua URL real)
const convexUrl = import.meta.env.VITE_CONVEX_URL || 'https://placeholder.convex.cloud';

if (!convexUrl || convexUrl === 'https://placeholder.convex.cloud') {
  console.warn("‚ö†Ô∏è VITE_CONVEX_URL n√£o est√° configurada no arquivo .env");
  console.warn("üìù Crie um arquivo .env na raiz do projeto com suas chaves");
  console.warn("üîó Exemplo: VITE_CONVEX_URL=https://seu-projeto.convex.cloud");
}

// Criar cliente Convex
export const convex = new ConvexReactClient(convexUrl);

/**
 * Provider do Convex para envolver a aplica√ß√£o
 * Permite que todos os componentes acessem o banco de dados
 * 
 * @param children - Componentes React filhos que ter√£o acesso ao contexto Convex
 * @returns Provider do Convex envolvendo os componentes filhos
 */
export function ConvexClientProvider({ children }: { children: ReactNode }) {
  return (
    <ConvexProvider client={convex}>
      {children}
    </ConvexProvider>
  );
}

/**
 * Hook personalizado para verificar se o Convex est√° conectado
 * √ötil para mostrar status de conex√£o
 * 
 * @returns Objeto contendo o status de conex√£o com o Convex
 */
export function useConvexStatus() {
  // Esta fun√ß√£o ser√° implementada quando criarmos os hooks personalizados
  return { isConnected: true };
}
